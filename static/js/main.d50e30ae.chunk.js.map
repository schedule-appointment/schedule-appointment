{"version":3,"sources":["Constants.js","components/schedule-appointment/AuthenticationService.js","components/schedule-appointment/AuthenticatedRoute.jsx","components/schedule-appointment/LoginComponent.jsx","components/schedule-appointment/LogoutComponent.jsx","api/booking/ScheduleAppointmentService.js","components/schedule-appointment/ListOfScheduledAppointments.jsx","components/schedule-appointment/HeaderComponent.jsx","components/schedule-appointment/FooterComponent.jsx","components/schedule-appointment/ErrorComponent.jsx","api/booking/HelloWorldService.js","components/schedule-appointment/WelcomeComponent.jsx","api/admin/AdminService.js","components/schedule-appointment/UpdateScheduleComponent.jsx","api/admin/AdminAuthenticationService.js","components/admin/AdminHeaderComponent.jsx","components/admin/Contact.jsx","components/admin/GeneralInformation.jsx","components/admin/Signup.jsx","components/admin/Business.jsx","components/admin/ServiceTimings.jsx","components/admin/SpecialDayServiceTimings.jsx","components/admin/ServiceTimingsDetails.jsx","components/admin/AdminLoginComponent.jsx","components/admin/ListOfScheduledAppointments.jsx","components/admin/ListOfClients.jsx","components/admin/AdminHomePageComponent.jsx","components/schedule-appointment/ScheduleAppointment.jsx","App.js","serviceWorker.js","index.js"],"names":["PUT_SCHEDULED_APPOINTMENT","ADMIN_AUTHENTICATED","BUSINESS_ID","SERVICE_ID","USER_ID","APPOINTMENT_ID","SESSION_USER_TOKEN","userName","password","axios","post","username","basicAuthHeader","window","btoa","sessionStorage","setItem","this","setupAxiosInterceptors","jwt","removeItem","location","reload","getItem","interceptors","request","use","config","headers","authorization","AuthenticatedRoute","AuthenticationService","isUserLogedIn","props","to","Component","LoginComponent","state","isLogin","showMessage","handleChange","bind","loginClicked","event","setState","target","name","value","executeBasicAuthenticationService","then","response","registerSuccessfulLoginJwt","data","history","push","catch","className","type","onChange","onClick","Logout","get","id","scheduleAppointment","put","delete","ListOfScheduledAppointment","deleteScheduleClicked","refresh","updateScheduleClicked","addAppointmentClicked","appointments","message","ScheduleAppointmentService","retrieveAllScheduledAppointments","deleteScheduledAppointments","clasName","map","appointment","person","firstName","lastName","sex","contact","mobileNumber","homePhoneNumber","eMail","address","addressLine1","addressLine2","city","zipCode","reasonForVisit","status","toString","moment","date","format","numberOfPeople","HeaderComponent","userSession","href","logout","FooterComponent","ErrorComponent","WelcomeComponent","retrieveWelcomeMessage","welcomeMessage","handleSuccessResponse","handleError","HelloWorldService","executeHelloWorldService","error","errorMessage","userDetails","business","service","businessId","userId","serviceId","idAndDate","values","UpdateScheduleComponent","onSubmit","phone","timings","selectedTime","AdminService","createAppointment","intializeValues","appId","answer_array","split","time","reason","errors","Math","sign","test","parseInt","isValid","match","params","retrieveBusinessDetails","console","log","orgName","timezone","retrieveServiceAvailbleTimings","flag","initialValues","validate","validateOnBlur","validateOnChange","enableReinitialize","component","ticking","Object","entries","key","AdminHeaderComponent","activeClassName","AdminAuthenticationService","Contact","style","display","justifyContent","alignItems","paddingTop","GeneralInformation","appointmentDetails","getAppointmentbyId","Signup","officePhoneNumber","createUser","retrieveUserDetails","confirm_password","RegExp","Business","user","durationToServe","createBusiness","absolute","ServiceTimings","errorMessage1","errorMessage2","errorMessage3","errorMessage4","errorMessage5","monday","tuesday","wednesday","thursday","friday","saturday","sunday","createServiceTimings","err","retrieveServiceTimingsDetailsBYServiceId","p","saturrops","SpecialDayServiceTimings","specialDay","ServiceTimingsDetails","serviceTimingsDetails","retrieveServiceTimingsDetails","i","length","deleteServiceTimingsDetails","serviceTimingsDetail","updateServiceTimingsClicked","deleteServiceTimingsClicked","AdminLoginComponent","executeGetUserAndBusinessDetails","marginTop","placeholder","date1","getAppointments","ListOfClients","bisiness","handleClick","retrieveAllBusinessDetails","HomePageComponent","path","exact","ListOfScheduledAppointments","App","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d50e30ae.chunk.js","sourcesContent":["export const API_URL = 'https://schedule-appointment-api.herokuapp.com/appointment-api/'\nexport const GET_ALL_SCHEDULED_APPOINTMENT = 'https://schedule-appointment-api.herokuapp.com/appointment-api/'\nexport const GET_SINGLE_SCHEDULED_APPOINTMENT = 'https://schedule-appointment-api.herokuapp.com/appointment-api/{id}?id='\nexport const PUT_SCHEDULED_APPOINTMENT = 'https://schedule-appointment-api.herokuapp.com/appointment-api/{id}?id='\nexport const POST_SCHEDULED_APPOINTMENT = 'https://schedule-appointment-api.herokuapp.com/appointment-api/'\nexport const AUTHENTICATE_SCHEDULED_APPOINTMENT = 'https://schedule-appointment-api.herokuapp.com/appointment-api/authenticate'\nexport const HELLO_WORLD = 'https://schedule-appointment-api.herokuapp.com/appointment-api/hello-world'\nexport const CREATE_USER = 'https://schedule-appointment-api.herokuapp.com/appointment-api/admin/create-user'\nexport const CREATE_BUSINESS = 'https://schedule-appointment-api.herokuapp.com/appointment-api/admin/create-business'\nexport const CREATE_SERVICE = 'https://schedule-appointment-api.herokuapp.com/appointment-api/admin/create-service-timing'\nexport const GET_SERVICE_TIMINGS_DETAILS = 'https://schedule-appointment-api.herokuapp.com/appointment-api/admin/get-service-timing/{businessId}?businessId='\nexport const ADMIN_AUTHENTICATE_SCHEDULED_APPOINTMENT = 'https://schedule-appointment-api.herokuapp.com/appointment-api/admin/authenticate'\nexport const ADMIN_AUTHENTICATED='ADMIN_AUTHENTICATED'\nexport const BUSINESS_ID='businessId'\nexport const SERVICE_ID='serviceId'\nexport const USER_ID='userId'\nexport const APPOINTMENT_ID = 'app_id'\nexport const LIST_OF_CLIENT = 'LIST_OF_CLIENT'\nexport const ADMIN_GET_BUSINESS_DETAILS_BY_ID = 'https://schedule-appointment-api.herokuapp.com/appointment-api/admin/get-business/{id}?id='\nexport const ADMIN_GET_BUSINESS_DETAILS = 'https://schedule-appointment-api.herokuapp.com/appointment-api/admin/get-user-details?eMail='\nexport const ADMIN_GET_SERVICE_TIMINGS = 'https://schedule-appointment-api.herokuapp.com/appointment-api/admin/get-service-timing?serviceId='\nexport const ADMIN_DELETE_SERVICE_TIMINGS = 'https://schedule-appointment-api.herokuapp.com/appointment-api/admin/delete-service-timing?serviceId='\nexport const ADMIN_GET_USER_DETAILS = 'https://schedule-appointment-api.herokuapp.com/appointment-api/admin/get-user-details-by-id?userId='\nexport const GET_SERVICE_STATISTICS = 'https://schedule-appointment-api.herokuapp.com/appointment-api/admin/availability-statics?businessId='\n// 63&date=2020-09-30'\nexport const GET_SLOTS = 'https://schedule-appointment-api.herokuapp.com/appointment-api/admin/create-appointment'\nexport const GET_ALL_APPOINTENT = 'https://schedule-appointment-api.herokuapp.com/appointment-api/admin/get-appointment?businessId='\nexport const ADMIN_GET_ALL_BUSINESS_DETAILS = 'https://schedule-appointment-api.herokuapp.com/appointment-api/admin/get-all-business/'\nexport const GET_APPOINTENT_BY_ID = 'https://schedule-appointment-api.herokuapp.com/appointment-api/admin/get-appointment-id?appId='","import axios from \"axios\";\nimport { AUTHENTICATE_SCHEDULED_APPOINTMENT } from \"../../Constants\";\nexport const SESSION_USER_TOKEN = 'authenticatedUser'\n\nclass AuthenticationService {\n\n    executeBasicAuthenticationService(userName,password){\n        return axios.post(`${AUTHENTICATE_SCHEDULED_APPOINTMENT}`,{\n            username:userName,\n            password: password \n        })\n    }\n\n    registerSuccessfulLogin(userName, password) {\n\n        let basicAuthHeader = 'Basic ' + window.btoa(userName + \":\" + password)\n\n        sessionStorage.setItem(SESSION_USER_TOKEN, userName);\n        this.setupAxiosInterceptors(basicAuthHeader)\n       // window.location.reload();\n\n    }\n\n    registerSuccessfulLoginJwt(jwt) {\n\n        let basicAuthHeader = 'Bearer ' + jwt\n\n        sessionStorage.setItem(SESSION_USER_TOKEN, basicAuthHeader);\n        this.setupAxiosInterceptors(basicAuthHeader)\n       // window.location.reload();\n\n    }\n\n    logout() {\n        sessionStorage.removeItem(SESSION_USER_TOKEN);\n        window.location.reload();\n    }\n\n    isUserLogedIn() {\n        var user = sessionStorage.getItem(SESSION_USER_TOKEN);\n        if (user === null) {\n            return false\n        } else {\n            return true\n        }\n    }\n\n    setupAxiosInterceptors(jwt) {\n\n        axios.interceptors.request.use(\n            (config) => {\n                \n              //  if (this.isUserLogedIn()) {\n                   // config.headers['Authorization'] = 'Bearer ' + jwt;\n                    config.headers.authorization = sessionStorage.getItem(SESSION_USER_TOKEN);\n                //}\n                 return config\n            }\n        )\n    }\n\n}\n\nexport default new AuthenticationService()","\nimport React, {Component} from 'react'\nimport AuthenticationService from './AuthenticationService.js';\nimport { Route, Redirect } from 'react-router-dom';\n\n\nclass AuthenticatedRoute extends Component{\n    render(){\n        \n            if(AuthenticationService.isUserLogedIn()){\n               return <Route {...this.props}></Route>\n            }else{\n                return <Redirect to=\"/login\"/>\n            }\n    }\n}\n\nexport default AuthenticatedRoute","import React, { Component } from \"react\";\nimport \"./ScheduleAppointmnt.css\";\nimport AuthenticationService from \"./AuthenticationService.js\";\n\nclass LoginComponent extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      username: \"\",\n      password: \"\",\n      isLogin: false,\n      showMessage: false,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.loginClicked = this.loginClicked.bind(this);\n  }\n  handleChange(event) {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  loginClicked() {\n    AuthenticationService.executeBasicAuthenticationService(\n      this.state.username,\n      this.state.password\n    ).then((response) => {\n      AuthenticationService.registerSuccessfulLoginJwt(response.data.jwt)\n      // let basicAuthHeader = 'Bearer ' + response.data.jwt  \n      //  sessionStorage.setItem('Authorization', basicAuthHeader);\n      //  AuthenticationService.setupAxiosInterceptors(basicAuthHeader)\n      this.props.history.push(\"/welcome\");\n      // window.location.reload();\n    })\n      .catch(\n        () => {\n          this.props.history.push(\"/\");\n          this.setState({ showMessage: false });\n          this.setState({ isLogin: true });\n        }\n      );\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Login</h1>\n        <div className=\"container\">\n          {this.state.isLogin && (\n            <div className=\"alert alert-warning\">Invalid Credentials</div>\n          )}\n          {this.state.showMessage && <div>Login is Sucessful</div>}\n          User Name :{\" \"}\n          <input\n            type=\"text\"\n            name=\"username\"\n            value={this.state.username}\n            onChange={this.handleChange}\n          />\n          password :{\" \"}\n          <input\n            type=\"password\"\n            name=\"password\"\n            value={this.state.password}\n            onChange={this.handleChange}\n          />\n          <button className=\"btn btn-success\" onClick={this.loginClicked}>\n            Login\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LoginComponent;\n","import React, { Component } from 'react';\nimport './ScheduleAppointmnt.css'\n\n    class  Logout extends Component{\n        render(){\n        return(  <div>\n          <h1>Loged out</h1>\n          <div className=\"container\"></div>\n          Thank you.\n          </div>)\n        }\n      }\n\n      export default Logout","import axios from \"axios\";\nimport {\n  GET_ALL_SCHEDULED_APPOINTMENT,\n  PUT_SCHEDULED_APPOINTMENT,\n  POST_SCHEDULED_APPOINTMENT,\n  GET_SINGLE_SCHEDULED_APPOINTMENT,\n} from \"../../Constants\";\n\nclass ScheduleAppointmentService {\n  retrieveAllScheduledAppointments() {\n    return axios.get(`${GET_ALL_SCHEDULED_APPOINTMENT}`);\n  }\n\n  retrieveScheduledAppointments(id) {\n    return axios.get(`${GET_SINGLE_SCHEDULED_APPOINTMENT}${id}`);\n  }\n\n  updateScheduledAppointments(id, scheduleAppointment) {\n    return axios.put(`${PUT_SCHEDULED_APPOINTMENT}${id}`, scheduleAppointment);\n  }\n\n  addAppointments(scheduleAppointment) {\n    return axios.post(`${POST_SCHEDULED_APPOINTMENT}`, scheduleAppointment);\n  }\n\n  deleteScheduledAppointments(id) {\n    return axios.delete(`${PUT_SCHEDULED_APPOINTMENT}${id}`);\n  }\n}\n\nexport default new ScheduleAppointmentService();\n","import React, { Component } from 'react';\nimport '../../App.css'\nimport moment from 'moment'\nimport ScheduleAppointmentService from '../../api/booking/ScheduleAppointmentService.js'\n\nclass ListOfScheduledAppointment extends Component{\n    constructor(props){\n      super(props)\n         this.deleteScheduleClicked = this.deleteScheduleClicked.bind(this)\n        this.refresh = this.refresh.bind(this)\n        this.updateScheduleClicked = this.updateScheduleClicked.bind(this)\n        this.addAppointmentClicked = this.addAppointmentClicked.bind(this)\n        this.state = {\n        appointments : [],\n        message : null\n      }\n    }\n\n    componentDidMount(){\n      this.refresh();\n    }\n\n    refresh() {\n    ScheduleAppointmentService.retrieveAllScheduledAppointments()\n      .then(response => {\n        this.setState({ appointments: response.data });\n      });\n  }\n\n    deleteScheduleClicked(id){\n      ScheduleAppointmentService.deleteScheduledAppointments(id)\n      .then(response=>{\n     //   this.setState({appointments:response.data})\n       this.setState({message:`Deleted Scheduled Appointment ${id}`})\n       this.refresh()\n\n      })\n    }\n\n    updateScheduleClicked(id){\n      this.props.history.push(`/update/${id}`)\n\n    }\n\n    addAppointmentClicked(){\n      this.props.history.push(`/update/-1`)\n\n    }\n\n    render(){\n      return(\n        <div clasName>\n          <h1>List Of Scheduled Appointment</h1>\n          {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\n          <div>\n          <table className=\"table\">\n            <thead>\n              <tr>\n              <th>Name</th>\n              <th>Sex</th>\n              <th>Mobile Ph</th>\n              <th>Home Ph</th>\n              <th>e-Mail</th>\n              <th>Address Line 1</th>\n              <th>Address Line 2</th>\n              <th>City</th>\n              <th>State</th>\n              <th>Zipe</th>\n                <th>Reason for Visit</th>\n                <th>Appointment Status</th>\n                <th>Date of Appoinement</th>\n                <th>Number of People</th>\n                <th>Update</th>\n                <th>Delete</th>\n              </tr>\n            </thead>\n            <tbody>\n              {\n               this.state.appointments.map(\n                 appointment =>\n              <tr key={appointment.id}>\n                <td>{appointment.person.firstName} {appointment.person.lastName}</td>\n                <td>{appointment.person.sex}</td>\n                <td>{appointment.person.contact.mobileNumber}</td>\n                <td>{appointment.person.contact.homePhoneNumber}</td>\n                <td>{appointment.person.contact.eMail}</td>\n                <td>{appointment.person.address.addressLine1}</td>\n                <td>{appointment.person.address.addressLine2}</td>\n                <td>{appointment.person.address.city}</td>\n                <td>{appointment.person.address.state}</td>\n                <td>{appointment.person.address.zipCode}</td>                \n                <td>{appointment.reasonForVisit}</td>\n                <td>{appointment.status.toString()}</td>\n                <td>{moment(appointment.date).format('YYYY-MM-DD HH:mm:ss')}</td>\n                <td>{appointment.numberOfPeople}</td>\n                <td><button className=\"btn btn-success\" onClick={() => this.updateScheduleClicked(appointment.id)}>Update</button></td>\n                <td><button className=\"btn btn-warning\" onClick={() => this.deleteScheduleClicked(appointment.id)}>Delete</button></td>\n              </tr>\n               )\n              }\n            </tbody>\n          </table>\n          <div className=\"row\">\n              <button className=\"btn btn-success\" onClick={this.addAppointmentClicked}>Add Appointment</button>\n          </div>\n          </div>\n        </div>\n      )\n    }\n  }\n\n  export default ListOfScheduledAppointment","import React, { Component } from 'react';\nimport {Link} from 'react-router-dom'\nimport AuthenticationService, { SESSION_USER_TOKEN } from './AuthenticationService.js'\n\n\nclass HeaderComponent extends Component{\n    render(){\n      const userSession = sessionStorage.getItem(SESSION_USER_TOKEN);\n\n      return(\n        <header>\n          <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\n            <div><a href=\"http://localhost:3000/\" className=\"navbar-brand\">ScheduleAppointmnt</a></div>\n            <ul className=\"navbar-nav navbar-collapse\">\n              {userSession && <li> <Link className=\"nav-link\" to=\"/welcome\">Home</Link></li>}\n              {userSession && <li> <Link className=\"nav-link\" to=\"/list\">Schedule Appointment </Link></li>}\n            </ul>\n            <ul className=\"navbar-nav navbar-collapse justify-content-end\">\n              {!userSession && <li><Link className=\"nav-link\" to=\"/login\">Login</Link></li>}\n              {userSession && <li><Link className=\"nav-link\" to=\"/logout\" onClick={AuthenticationService.logout}>Logout</Link></li>}\n            </ul>\n          </nav>\n        </header>\n      )\n    }\n  }\n\n  export default HeaderComponent","import React, { Component } from 'react';\nimport './ScheduleAppointmnt.css'\n\nclass  FooterComponent extends Component{\n    render(){\n    return( \n      <footer className=\"footer\">\n        <span className=\"text-muted\">All Rights Reserved 2020 @ScheduleAppointmnt</span>\n      </footer>\n    )\n    }\n  }\n\n\n\nexport default FooterComponent","import React from 'react';\nimport './ScheduleAppointmnt.css'\n\nfunction ErrorComponent(){\n  return <div>An error occured. Please contact Ram</div>\n}\n\n  export default ErrorComponent","import axios from \"axios\"\nimport { HELLO_WORLD } from \"../../Constants\";\n\nclass HelloWorldService{\n    executeHelloWorldService(){\n       return axios.get(`${HELLO_WORLD}`);\n    }\n}\n\nexport default new HelloWorldService()","\nimport React, { Component } from 'react';\nimport {Link} from 'react-router-dom'\nimport './ScheduleAppointmnt.css'\nimport HelloWorldService from '../../api/booking/HelloWorldService.js'\n\n    \n\n    class WelcomeComponent extends Component{\n      constructor(props){\n        super(props)\n        this.retrieveWelcomeMessage = this.retrieveWelcomeMessage.bind(this)\n        this.state = {\n          welcomeMessage : ''\n        }\n        this.handleSuccessResponse = this.handleSuccessResponse.bind(this)\n        this.handleError = this.handleError.bind(this)\n      }\n        render(){\n          \n          return(\n            <>\n            <h1>Welcome!</h1>\n            <div className=\"container\">Manage your appointments <Link to=\"/list\">here</Link>\n            </div>\n            <div className=\"container\">\n              Click hear to get customized welcom message\n              <button className=\"btn btn-success\" onClick={this.retrieveWelcomeMessage}>Get Welcome Message</button>\n            </div>\n            <div className=\"container\">\n              {this.state.welcomeMessage}\n            </div>\n            </>\n          )\n        }\n        retrieveWelcomeMessage(){\n          HelloWorldService.executeHelloWorldService()\n          .then(response => this.handleSuccessResponse(response))\n          .catch(error => this.handleError(error))\n        }\n\n        handleSuccessResponse(response){\n          this.setState({welcomeMessage:response.data})\n        }\n\n        handleError(error){\n          let errorMessage = '';\n          if(error.message){\n            errorMessage += error.message\n          }\n\n          if(error.response && error.response.data){\n            errorMessage += error.response.data.error\n\n          }\n          this.setState({welcomeMessage:errorMessage})\n\n        }\n      }\n  \n   export default WelcomeComponent  ","import axios from \"axios\";\nimport {\n  CREATE_USER,\n  CREATE_BUSINESS,\n  CREATE_SERVICE,\n  GET_SERVICE_TIMINGS_DETAILS, ADMIN_GET_SERVICE_TIMINGS, ADMIN_DELETE_SERVICE_TIMINGS, ADMIN_GET_BUSINESS_DETAILS_BY_ID, ADMIN_GET_USER_DETAILS, GET_SERVICE_STATISTICS, GET_SLOTS, GET_ALL_APPOINTENT, ADMIN_GET_ALL_BUSINESS_DETAILS, GET_APPOINTENT_BY_ID\n} from \"../../Constants\";\n\nclass AdminService {\n\n  createUser(userDetails) {\n    return axios.post(`${CREATE_USER}`, userDetails);\n  }\n\n  createBusiness(business) {\n   return axios.post(`${CREATE_BUSINESS}`, business);\n }\n\n createServiceTimings(service) {\n return axios.post(`${CREATE_SERVICE}`, service);\n}\n\n\nretrieveServiceTimingsDetails(businessId) {\n  return axios.get(`${GET_SERVICE_TIMINGS_DETAILS}${businessId}`);\n}\n\nretrieveBusinessDetails(businessId) {\n  return axios.get(`${ADMIN_GET_BUSINESS_DETAILS_BY_ID}${businessId}`);\n}\n\nretrieveAllBusinessDetails() {\n  return axios.get(`${ADMIN_GET_ALL_BUSINESS_DETAILS}`);\n}\n\nretrieveUserDetails(userId) {\n  return axios.get(`${ADMIN_GET_USER_DETAILS}${userId}`);\n}\n\n\ndeleteServiceTimingsDetails(serviceId) {\n  return axios.delete(`${ADMIN_DELETE_SERVICE_TIMINGS}${serviceId}`);\n}\n\nretrieveServiceTimingsDetailsBYServiceId(serviceId) {\n  return axios.get(`${ADMIN_GET_SERVICE_TIMINGS}${serviceId}`);\n}\n\nretrieveServiceAvailbleTimings(idAndDate) {\n  return axios.get(`${GET_SERVICE_STATISTICS}${idAndDate}`);\n}\n\ncreateAppointment(values){\n  return axios.post(`${GET_SLOTS}`, values);\n}\n\ngetAppointments(values){\n  return axios.get(`${GET_ALL_APPOINTENT}${values}`);\n}\n\ngetAppointmentbyId(id){\n  return axios.get(`${GET_APPOINTENT_BY_ID}${id}`);\n}\n\n}\n\nexport default new AdminService();\n","import React, { Component } from \"react\";\nimport moment from \"moment\";\nimport { Formik, Form, Field, ErrorMessage, FieldArray } from \"formik\";\nimport ScheduleAppointmentService from \"../../api/booking/ScheduleAppointmentService\";\nimport AdminService from \"../../api/admin/AdminService\";\nimport { APPOINTMENT_ID, BUSINESS_ID, LIST_OF_CLIENT } from \"../../Constants\";\nimport Clock from 'react-live-clock';\n\n\nclass UpdateScheduleComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      //id: this.props.match.params.id,\n      //  date: \"\",\n      name: \"\",\n      reasonForVisit: \"\",\n      numberOfPeople: \"\",\n      eMail: \"\",\n      phone: \"\",\n      date: \"\",\n      timings: \"\",\n      selectedTime: \"\",\n    };\n  }\n\n  onSubmit(values) {\n\n    AdminService.createAppointment(this.intializeValues(values)).then(\n      (response) => {\n        sessionStorage.setItem(APPOINTMENT_ID, response.data.appId);\n        this.props.history.push(\"/generalInfo\");\n      }\n    );\n  }\n\n  intializeValues(values) {\n    const answer_array = values.selectedTime.split(\"/\");\n\n    return {\n      business: {\n        businessId: sessionStorage.getItem(BUSINESS_ID),\n      },\n      date: values.date,\n      time: answer_array[0],\n      name: values.name,\n      reason: values.reasonForVisit,\n      numberOfPeople: values.numberOfPeople,\n      eMail: values.eMail,\n      phone: values.phone,\n    };\n  }\n\n  validate(values) {\n    let errors = {};\n    if (!values.name) {\n      errors.name = \"Enter a name\";\n    }\n    if (!values.numberOfPeople) {\n      errors.numberOfPeople = \"Enter number of people\";\n    } else if (Math.sign(values.numberOfPeople) <= 0) {\n      errors.numberOfPeople = \"Please enter only number.\";\n    }\n\n    if (!values.eMail) {\n      errors.eMail = \"Enter a e-mail\";\n    } else if (\n      !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.eMail)\n    ) {\n      errors.eMail = \"Invalid email address\";\n    }\n\n    if (!values.selectedTime) {\n      errors.selectedTime = \"Please select a availble time slot\";\n    } else {\n      const answer_array = values.selectedTime.split(\"/\");\n      if (parseInt(answer_array[1]) < parseInt(values.numberOfPeople)) {\n        errors.numberOfPeople =\n          \"Number of people is greater than Available slots \";\n      }\n    }\n\n    if (!values.date) {\n      errors.date = \"Enter a valid date\";\n    } else if (!moment(values.date).isValid) {\n      errors.date = \"Enter a valid date\";\n    }\n    return errors;\n  }\n\n  componentDidMount() {\n\n    if (this.props.match.params.id === \":id\") {\n      sessionStorage.removeItem(BUSINESS_ID);\n        this.props.history.push(\"/listOfClients\");\n    } else {\n      AdminService.retrieveBusinessDetails(this.props.match.params.id).then(\n        (response) => {\n          console.log(response)\n          sessionStorage.setItem(BUSINESS_ID, response.data.businessId);\n          sessionStorage.removeItem(LIST_OF_CLIENT);\n          this.setState({\n            businessId: sessionStorage.getItem(BUSINESS_ID),\n            orgName: response.data.orgName,\n            timezone : response.data.timezone,\n          });\n        }\n      );\n    }\n  }\n\n  handleChange(event) {\n    this.setState({ date: event.target.value });\n    AdminService.retrieveServiceAvailbleTimings(\n      sessionStorage.getItem(BUSINESS_ID) + \"&date=\" + event.target.value\n    )\n      .then((response) => {\n        // this.setState({ timings: JSON.stringify(response.data) });\n        this.setState({ timings: response.data });\n      })\n      .catch(() => {\n        this.props.history.push(\"/addUserAppointment/:id\");\n        this.setState({ timings: {} });\n        sessionStorage.setItem(\"timings\", \"hide\");\n      });\n  }\n\n  render() {\n    let {\n      date,\n      name,\n      reasonForVisit,\n      numberOfPeople,\n      orgName,\n      timezone,\n      eMail,\n      phone,\n      timings,\n      selectedTime,\n    } = this.state;\n    // let sex = this.state.sex\n    // let mobilePh = this.state.mobilePh\n    // let HomePh = this.state.HomePh\n    // let date = this.state.date\n\n    return (\n      <div className=\"body\">\n        {this.state.flag=false}\n        <h2>Appointment for {orgName}</h2>\n        {/* {this.state.timings.split(',')} */}\n        {/* {this.state.timings.map(txt => <p>{txt}</p>)} */}\n\n        <div></div>\n        <div className=\"container\">\n          <Formik\n            initialValues={{\n              date,\n              name,\n              reasonForVisit,\n              numberOfPeople,\n              eMail,\n              phone,\n              orgName,\n              timings,\n              selectedTime,\n            }}\n            onSubmit={this.onSubmit}\n            validate={this.validate}\n            validateOnBlur={false}\n            validateOnChange={false}\n            enableReinitialize={true}\n          >\n            {(props) => (\n              <Form>\n                <ErrorMessage\n                  name=\"date\"\n                  component=\"div\"\n                  className=\"alert alert-warning\"\n                />\n                <fieldset className=\"form-group\">\n                  <label className=\"label-name  required\">Date</label>\n                  <Field\n                    className=\"form-control\"\n                    type=\"date\"\n                    name=\"date\"\n                    onChange={this.handleChange}\n                  ></Field>\n                </fieldset>\n                <fieldset className=\"form-group\">\n                  <label className=\"label-name\" >\n                    Current date and time(MM/DD/YYYY HH:mm:ss)\n                    </label>\n                    <label className=\"form-group\" >\n                  <Clock  format={'MM/DD/YYYY HH:mm:ss'} ticking={true} timezone={timezone} />\n                \n                  </label>\n                </fieldset>\n                <fieldset className=\"form-group\">\n                {!this.state.flag &&\n<label className=\"label-name\">\n                  No slots are available for selected date, Please change the date,\n                  </label>}\n                {this.state.flag &&\n<label className=\"label-name  required\">\n                    Time / Available slots\n                  </label>}\n                  <ErrorMessage\n                    name=\"selectedTime\"\n                    component=\"div\"\n                    className=\"alert alert-warning\"\n                  />\n                  <fieldset></fieldset>\n                  {Object.entries(this.state.timings).map(([key, value]) => {\n                    return (\n                      \n                      <div className=\"btn\">\n                        {this.state.flag=true}\n                        <label>\n                          {\" \"}\n                          <Field\n                            type=\"radio\"\n                            name=\"selectedTime\"\n                            value={key + \"/\" + value.toString()}\n                          />\n                          {key} / {value.toString()}\n                        </label>\n                      </div>\n                    );\n                  })}\n                </fieldset>\n\n                <ErrorMessage\n                  name=\"name\"\n                  component=\"div\"\n                  className=\"alert alert-warning\"\n                />\n                <fieldset className=\"form-group\">\n                  <label className=\"label-name  required\">Name</label>\n                  <Field\n                    className=\"form-control\"\n                    type=\"text\"\n                    name=\"name\"\n                  ></Field>\n                </fieldset>\n\n                <fieldset className=\"form-group\">\n                  <label className=\"label-name  required\">\n                    Reason for visit\n                  </label>\n                  <Field\n                    className=\"form-control\"\n                    type=\"text\"\n                    name=\"reasonForVisit\"\n                  ></Field>\n                </fieldset>\n\n                <fieldset className=\"form-group\">\n                  <label className=\"label-name  required\">\n                    Number of people\n                  </label>\n                  <ErrorMessage\n                    name=\"numberOfPeople\"\n                    component=\"div\"\n                    className=\"alert alert-warning\"\n                  />\n                  <Field\n                    className=\"form-control\"\n                    type=\"number\"\n                    name=\"numberOfPeople\"\n                  ></Field>\n                </fieldset>\n\n                <fieldset className=\"form-group\">\n                  <label className=\"label-name  required\">Email</label>\n                  <ErrorMessage\n                    name=\"eMail\"\n                    component=\"div\"\n                    className=\"alert alert-warning\"\n                  />\n                  <Field\n                    className=\"form-control\"\n                    type=\"text\"\n                    name=\"eMail\"\n                  ></Field>\n                </fieldset>\n                <fieldset className=\"form-group\">\n                  <label className=\"label-name\">Phone</label>\n                  <ErrorMessage\n                    name=\"phone\"\n                    component=\"div\"\n                    className=\"alert alert-warning\"\n                  />\n                  <Field\n                    className=\"form-control\"\n                    type=\"number\"\n                    name=\"phone\"\n                  ></Field>\n                </fieldset>\n                <button className=\"btn btn-success btn-lg\" type=\"submit\">\n                  Save\n                </button>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UpdateScheduleComponent;\n","import axios from \"axios\";\nimport { ADMIN_AUTHENTICATED, ADMIN_AUTHENTICATE_SCHEDULED_APPOINTMENT, ADMIN_GET_BUSINESS_DETAILS, BUSINESS_ID, SERVICE_ID, USER_ID } from \"../../Constants\";\n\nclass AdminAuthenticationService {\n\n    executeBasicAuthenticationService(userName,password){\n        return axios.post(`${ADMIN_AUTHENTICATE_SCHEDULED_APPOINTMENT}`,{\n            username:userName,\n            password: password \n        })\n    }\n\n    executeGetUserAndBusinessDetails(userName){\n        return axios.get(`${ADMIN_GET_BUSINESS_DETAILS}${userName}`)\n    }\n\n\n    registerSuccessfulLoginJwt(jwt) {\n\n        let basicAuthHeader = 'Bearer ' + jwt\n        sessionStorage.setItem(ADMIN_AUTHENTICATED, basicAuthHeader);\n        this.setupAxiosInterceptors(basicAuthHeader)\n    }\n\n    logout() {\n       sessionStorage.removeItem(ADMIN_AUTHENTICATED);\n       sessionStorage.removeItem(BUSINESS_ID);\n       sessionStorage.removeItem(USER_ID);\n       sessionStorage.removeItem(SERVICE_ID);\n\n        window.location.href = \"/adminLogin/\"\n    }\n\n    isUserLogedIn() {\n        var user = sessionStorage.getItem(ADMIN_AUTHENTICATED);\n        if (user === null) {\n            return false\n        } else {\n            return true\n        }\n    }\n\n    setupAxiosInterceptors(jwt) {\n\n        axios.interceptors.request.use(\n            (config) => {\n                \n              //  if (this.isUserLogedIn()) {\n                   // config.headers['Authorization'] = 'Bearer ' + jwt;\n                    config.headers.authorization = sessionStorage.getItem(ADMIN_AUTHENTICATED);\n                //}\n                 return config\n            }\n        )\n    }\n\n}\n\nexport default new AdminAuthenticationService()","import React, { Component } from 'react';\nimport { NavLink } from 'react-router-dom'\nimport AdminAuthenticationService from '../../api/admin/AdminAuthenticationService';\nimport { ADMIN_AUTHENTICATED, BUSINESS_ID } from '../../Constants';\nimport './Admin.css'\n\n\nclass AdminHeaderComponent extends Component {\n  render() { \n    const userSession = sessionStorage.getItem(ADMIN_AUTHENTICATED);\n    return (\n      <header>\n        <nav className=\"navbar navbar-expand-md navbar-light header\">\n          {/* <ul className=\"nav nav-pills\">\n            \n          </ul> */}\n          <ul className=\"navbar-nav navbar-collapse nav-pills\">\n          <li> <NavLink to=\"/generalInfo\"  activeClassName=\"active\" className=\"navbar-brand\">Home</NavLink></li>\n           {userSession && <li><NavLink activeClassName=\"active\" className=\"navbar-brand text\" to=\"/signup\">User-Details</NavLink></li>}\n           {userSession &&  <li><NavLink activeClassName=\"active\" className=\"navbar-brand\" to=\"/businessDetails\">Business-Details</NavLink></li>}\n           {userSession && sessionStorage.getItem(BUSINESS_ID) &&  <li><NavLink activeClassName=\"active\" className=\"navbar-brand\" to=\"/serviceDetails\">Service Details</NavLink></li>}\n           {!userSession && <li><NavLink className=\"navbar-brand\" to=\"/addUserAppointment/:id\"> Book-Appointment</NavLink></li>}\n\n           {userSession && sessionStorage.getItem(BUSINESS_ID) &&<li><NavLink className=\"navbar-brand\" to=\"/serviceTimingsDetails\">General-hours</NavLink></li>}\n           {userSession && sessionStorage.getItem(BUSINESS_ID) &&<li><NavLink className=\"navbar-brand\" to=\"/specialDayDetails\">Add-Special-Day</NavLink></li>}\n           {userSession && sessionStorage.getItem(BUSINESS_ID) &&<li><NavLink className=\"navbar-brand\" to=\"/listOfAppointments\">Appointment-for-the-day</NavLink></li>}\n\n            <li> <NavLink className=\"navbar-brand\" to=\"/contact\">Contact</NavLink></li>\n          </ul>\n          <ul className=\"navbar-nav navbar-collapse justify-content-end nav-pills\">\n            {!userSession && <li><NavLink className=\"navbar-brand\" to=\"/adminLogin\">Login</NavLink></li>}\n            {!userSession && <li><NavLink className=\"navbar-brand\" to=\"/signup\">Signup</NavLink></li>}\n            {userSession &&<li><NavLink className=\"navbar-brand\" to=\"/adminLogin\" onClick={AdminAuthenticationService.logout}>Logout</NavLink></li>}\n          </ul>\n        </nav>\n      </header>\n    )\n  }\n}\n\nexport default AdminHeaderComponent","import React, { Component } from \"react\";\n\nclass Contact extends Component {\n  constructor(props) {\n    super();\n  }\n\n  render() {\n    return (\n      <div   style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          paddingTop:\"20%\"\n        }}>\n      RRRR<br></br>\n      email: rrrr.appointment.scheduler@gmail.com<br></br>\n     </div>\n    );\n  }\n}\n\nexport default Contact;\n","import React, { Component } from \"react\";\nimport { APPOINTMENT_ID } from \"../../Constants\";\nimport AdminService from \"../../api/admin/AdminService\";\n\nclass GeneralInformation extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      appointmentDetails: \"\",\n    };\n  }\n\n  componentDidMount() {\n    if (sessionStorage.getItem(APPOINTMENT_ID)) {\n      AdminService.getAppointmentbyId(\n        sessionStorage.getItem(APPOINTMENT_ID)\n      ).then((response) => {\n        this.setState({ appointmentDetails: response.data });\n         sessionStorage.removeItem(APPOINTMENT_ID);\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.appointmentDetails && (\n          <div>\n            <br></br>\n            <h3 className=\"about-us\">\n              {this.state.appointmentDetails.name} your appointment is booked and confirmation email is sent to the email Id provided.<br></br>\n              Please show the email at the time of checkin\n            </h3>\n            <br></br>\n           <label className=\"about-us\"> Appointment Id &nbsp;&nbsp;&nbsp;&nbsp;: {this.state.appointmentDetails.appId}</label>\n            <br></br>\n            <label className=\"about-us\">  Name &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n            : {this.state.appointmentDetails.name}</label>\n            <br></br>\n            <label className=\"about-us\"> Date &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n            &nbsp;&nbsp;: {this.state.appointmentDetails.date}</label>\n            <br></br>\n            <label className=\"about-us\">  Time &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n            &nbsp;&nbsp;: {this.state.appointmentDetails.time}</label>\n            <br></br>\n            <label className=\"about-us\">  Reason &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n            &nbsp;&nbsp;: {this.state.appointmentDetails.reason}</label>\n            <br></br>\n            <label className=\"about-us\">  Number of People : {this.state.appointmentDetails.numberOfPeople}</label>\n            <br></br>\n            <label className=\"about-us\">  E-Mail &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n            &nbsp;: {this.state.appointmentDetails.eMail}</label>\n            <br></br>\n            <label className=\"about-us\">  Phone &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: {this.state.appointmentDetails.phone}</label>  <br></br>\n            <label className=\"about-us\"> Thank you for Using our website. The website is free and can be used for any business. Sign up to register your business.</label>\n          </div>\n          \n        )}\n        <br></br>\n        <h2>About us</h2>\n        <div>\n          <ul className=\"about-us\">\n            <li >\n              The pandemic has caused massive impact on the small business.<br></br>\n              Small business owners across the world are struggling with pandemic related disruptions and had already laid off large number of employees- and it is not possible for all business to convert to online.\n            </li>\n            <li>\n              Let's give back to the small businesses that have given us so much.<br></br>\n              Keeping small business open for business is good for business.\n            </li>\n            <li>\n              I thought of contributing my part to the business by developing a free Scheduler app(website).<br></br>\n              Which the small business customers can use to book appointments.<br></br>\n              By knowing how many Customers will be coming during a specific time frame the business owners can manage safely and effectively.\n            </li>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GeneralInformation;\n","import React, { Component } from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport AdminService from \"../../api/admin/AdminService\";\nimport { BUSINESS_ID, SERVICE_ID, USER_ID } from \"../../Constants\";\n\nclass Signup extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userId: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      eMail: \"\",\n      password: \"\",\n      mobileNumber: \"\",\n      officePhoneNumber: \"\",\n      addressLine1: \"\",\n      addressLine2: \"\",\n      city: \"\",\n      state: \"\",\n      zipCode: \"\",\n      errorMessage:\"\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.intializeValues = this.intializeValues.bind(this);\n  }\n\n  onSubmit(values) {\n    AdminService.createUser(this.intializeValues(values))\n      .then((response) => {\n        if (\n          sessionStorage.getItem(USER_ID) == \"\" ||\n          sessionStorage.getItem(USER_ID) == null\n        ) {\n          sessionStorage.setItem(USER_ID, response.data.userId);\n          this.props.history.push(`/adminLogin`);\n        } else {\n          this.props.history.push(`/businessDetails`);\n        }\n      })\n      .catch(() => {\n        this.props.history.push(`/error`);\n      });\n  }\n\n  componentDidMount() {\n    if (sessionStorage.getItem(USER_ID)) {\n\n      AdminService.retrieveUserDetails(sessionStorage.getItem(USER_ID)).then(\n        (response) => {\n          this.setState({\n            userId: sessionStorage.getItem(USER_ID),\n            firstName: response.data.firstName,\n            lastName: response.data.lastName,\n            eMail: response.data.eMail,\n            password: response.data.password,\n            mobileNumber: response.data.mobileNumber,\n            officePhoneNumber: response.data.officePhoneNumber,\n            addressLine1: response.data.addressLine1,\n            addressLine2: response.data.addressLine2,\n            city: response.data.city,\n            state: response.data.state,\n            zipCode: response.data.zipCode,\n          });\n        }\n      );\n    } else {\n      sessionStorage.removeItem(BUSINESS_ID);\n    }\n  }\n\n  validate(values) {\n    let errors = {};\n    if (!values.firstName) {\n      errors.firstName = \"Enter name\";\n    }\n    if (!values.lastName) {\n      errors.lastName = \"Enter name\";\n    }\n\n    if (!values.eMail) {\n      errors.eMail = \"Enter e-mail\";\n    } else if (\n      !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.eMail)\n    ) {\n      errors.eMail = \"Invalid email address\";\n    }\n\n    if (!values.password) {\n      errors.password = \"Please enter your password.\";\n    }\n\n    if (!values.confirm_password) {\n      errors.confirm_password = \"Please enter your confirm password.\";\n    }\n\n    if (\n      typeof values.password !== \"undefined\" &&\n      typeof values.confirm_password !== \"undefined\"\n    ) {\n      if (values.password != values.confirm_password) {\n        errors.password = \"Passwords don't match.\";\n      }\n    }\n\n    if (!values.mobileNumber) {\n      errors.mobileNumber = \"Enter phone number.\";\n    }\n    //  else if (values.mobileNumber) {\n    //   var pattern = new RegExp(/^[0-9\\b]+$/);\n\n    //   if (!pattern.test(values.mobileNumber)) {\n    //     errors.mobileNumber = \"Please enter only number.\";\n    //   } else if (values.mobileNumber.length != 10) {\n    //     errors.mobileNumber = \"Please enter valid phone number.\";\n    //   }\n    // }\n\n    if (!values.addressLine1) {\n      errors.addressLine1 = \"Enter address\";\n    }\n    if (!values.city) {\n      errors.city = \"Enter city\";\n    }\n    if (!values.state) {\n      errors.state = \"Enter state\";\n    }\n\n    if (!values.zipCode) {\n      errors.zipCode = \"Enter zipcode\";\n    } else if (values.zipCode) {\n      var pattern = new RegExp(/^[0-9\\b]+$/);\n\n      if (!pattern.test(values.zipCode)) {\n        errors.zipCode = \"Please enter only number.\";\n      }\n    }\n\n    if (!values.officePhoneNumber) {\n      errors.officePhoneNumber = \"Enter phone number.\";\n    }\n\n    return errors;\n  }\n\n  intializeValues(values) {\n    return {\n      userId: values.userId,\n      firstName: values.firstName,\n      lastName: values.lastName,\n      eMail: values.eMail,\n      password: values.password,\n      mobileNumber: values.mobileNumber,\n      officePhoneNumber: values.officePhoneNumber,\n      addressLine1: values.addressLine1,\n      addressLine2: values.addressLine2,\n      city: values.city,\n      state: values.state,\n      zipCode: values.zipCode,\n    };\n  }\n\n  handleChange(event) {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n  render() {\n    let {\n      userId,\n      firstName,\n      lastName,\n      eMail,\n      password,\n      mobileNumber,\n      officePhoneNumber,\n      addressLine1,\n      addressLine2,\n      city,\n      state,\n      zipCode,\n      confirm_password,\n      errorMessage,\n    } = this.state;\n    return (\n      <div>\n        <div className=\"container\">\n          <Formik\n            initialValues={{\n              userId,\n              firstName,\n              lastName,\n              eMail,\n              password,\n              mobileNumber,\n              officePhoneNumber,\n              addressLine1,\n              addressLine2,\n              city,\n              state,\n              zipCode,\n              confirm_password,\n              errorMessage,\n            }}\n            onSubmit={this.onSubmit}\n            validate={this.validate}\n            enableReinitialize={true}\n          >\n            {/* {this.state.isLogin && (\n            <div className=\"alert alert-warning\">Invalid Credentials</div>\n          )}\n          {this.state.showMessage && <div>Login is Sucessful</div>} */}\n            {(props) => (\n              <Form>\n               \n                <fieldset className=\"form-group\">\n                <ErrorMessage\n                  name=\"errorMessage\"\n                  component=\"div\"\n                  className=\"alert alert-warning\"\n                />\n                  <label className=\"label-name  required\">First name</label>\n                  <ErrorMessage\n                    name=\"firstName\"\n                    component=\"div\"\n                    className=\"alert alert-warning\"\n                  />\n                  <Field\n                    className=\"form-control\"\n                    type=\"text\"\n                    name=\"firstName\"\n                  ></Field>\n                </fieldset>\n                <fieldset className=\"form-group\">\n                  <label className=\"label-name  required\">Last name</label>\n                  <ErrorMessage\n                    name=\"lastName\"\n                    component=\"div\"\n                    className=\"alert alert-warning\"\n                  />\n                  <Field\n                    className=\"form-control\"\n                    type=\"text\"\n                    name=\"lastName\"\n                  ></Field>\n                </fieldset>\n                <fieldset className=\"form-group\">\n                  <label className=\"label-name  required\">e-Mail</label>\n                  <ErrorMessage\n                    name=\"eMail\"\n                    component=\"div\"\n                    className=\"alert alert-warning\"\n                  />\n                  <Field\n                    className=\"form-control\"\n                    type=\"text\"\n                    name=\"eMail\"\n                  ></Field>\n                </fieldset>\n                <fieldset className=\"form-group\">\n                  <label className=\"label-name  required\">Password</label>\n                  <ErrorMessage\n                    name=\"password\"\n                    component=\"div\"\n                    className=\"alert alert-warning\"\n                  />\n                  <Field\n                    className=\"form-control\"\n                    type=\"password\"\n                    name=\"password\"\n                  ></Field>\n                </fieldset>\n                <fieldset className=\"form-group\">\n                  <label className=\"label-name  required\">\n                    Confirm Password\n                  </label>\n                  <ErrorMessage\n                    name=\"confirm_password\"\n                    component=\"div\"\n                    className=\"alert alert-warning\"\n                  />\n                  <Field\n                    className=\"form-control\"\n                    type=\"password\"\n                    name=\"confirm_password\"\n                  ></Field>\n                </fieldset>\n                <fieldset className=\"form-group\">\n                  <label className=\"label-name  required\">Mobile</label>\n                  <ErrorMessage\n                    name=\"mobileNumber\"\n                    component=\"div\"\n                    className=\"alert alert-warning\"\n                  />\n                  <Field\n                    className=\"form-control\"\n                    type=\"number\"\n                    name=\"mobileNumber\"\n                  ></Field>\n                </fieldset>\n\n                <label className=\"label-name  required\">\n                  Provide your business address\n                </label>\n\n                <fieldset className=\"form-group\">\n                  <label className=\"label-name  required\">Address line 1</label>\n                  <ErrorMessage\n                    name=\"addressLine1\"\n                    component=\"div\"\n                    className=\"alert alert-warning\"\n                  />\n                  <Field\n                    className=\"form-control\"\n                    type=\"text\"\n                    name=\"addressLine1\"\n                  ></Field>\n                </fieldset>\n                <fieldset className=\"form-group\">\n                  <label className=\"label-name\">Address line 2</label>\n                  <Field\n                    className=\"form-control\"\n                    type=\"text\"\n                    name=\"addressLine2\"\n                  ></Field>\n                </fieldset>\n                <fieldset className=\"form-group\">\n                  <label className=\"label-name  required\">City</label>\n                  <ErrorMessage\n                    name=\"city\"\n                    component=\"div\"\n                    className=\"alert alert-warning\"\n                  />\n                  <Field\n                    className=\"form-control\"\n                    type=\"text\"\n                    name=\"city\"\n                  ></Field>\n                </fieldset>\n                <fieldset className=\"form-group\">\n                  <label className=\"label-name  required\">State</label>\n                  <ErrorMessage\n                    name=\"state\"\n                    component=\"div\"\n                    className=\"alert alert-warning\"\n                  />\n                  <Field\n                    className=\"form-control\"\n                    type=\"text\"\n                    name=\"state\"\n                  ></Field>\n                </fieldset>\n                <fieldset className=\"form-group\">\n                  <label className=\"label-name  required\">Zip</label>\n                  <ErrorMessage\n                    name=\"zipCode\"\n                    component=\"div\"\n                    className=\"alert alert-warning\"\n                  />\n                  <Field\n                    className=\"form-control\"\n                    type=\"text\"\n                    name=\"zipCode\"\n                  ></Field>\n                </fieldset>\n                <fieldset className=\"form-group\">\n                  <label className=\"label-name  required\">Office ph</label>\n                  <ErrorMessage\n                    name=\"officePhoneNumber\"\n                    component=\"div\"\n                    className=\"alert alert-warning\"\n                  />\n                  <Field\n                    className=\"form-control\"\n                    type=\"number\"\n                    name=\"officePhoneNumber\"\n                  ></Field>\n                </fieldset>\n                <button className=\"btn btn-success  btn-lg\" type=\"submit\">\n                  Save\n                </button>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Signup;\n","import React, { Component } from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport AdminService from \"../../api/admin/AdminService\";\nimport { BUSINESS_ID, SERVICE_ID, USER_ID } from \"../../Constants\";\nimport TimezonePicker from 'react-bootstrap-timezone-picker';\n\n\nclass Business extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: \"\",\n      orgName: \"\",\n      business: \"\",\n      userId: sessionStorage.getItem(USER_ID),\n      businessId: sessionStorage.getItem(BUSINESS_ID),\n      numberOfPeople: \"\",\n      durationToServe: \"\",\n      timezone: '',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.intializeValues = this.intializeValues.bind(this);\n  }\n\n  onSubmit(values) {\n    if (\n      sessionStorage.getItem(SERVICE_ID) == \"\" ||\n      sessionStorage.getItem(SERVICE_ID) == null\n    ) {\n      AdminService.createBusiness(this.intializeValues(values)).then(\n        (response) => {\n          sessionStorage.setItem(BUSINESS_ID, response.data.businessId);\n          this.props.history.push(`/serviceDetails`);\n        }\n      );\n    } else {\n      AdminService.createBusiness(this.intializeValues(values)).then(\n        (response) => {\n          sessionStorage.setItem(BUSINESS_ID, response.data.businessId);\n          this.props.history.push(`/serviceTimingsDetails`);\n        }\n      );\n    }\n  }\n\n  intializeValues(values) {\n    console.log(values)\n    console.log(this.state.timezone)\n    values.timezone = this.state.timezone\n    console.log( values.timezone)\n   \n\n    return {\n      businessId: values.businessId,\n      orgName: values.orgName,\n      user: {\n        userId: sessionStorage.getItem(USER_ID),\n      },\n      numberOfPeople: values.numberOfPeople,\n      durationToServe: values.durationToServe,\n      timezone : values.timezone,\n    };\n  }\n\n  validate(values) {\n    let errors = {};\n    if (!values.orgName) {\n      errors.orgName = \"Enter Organisation name \";\n    }\n    if (!values.numberOfPeople) {\n      errors.numberOfPeople = \"Enter number of people\";\n    } else if (Math.sign(values.numberOfPeople) <= 0) {\n      errors.numberOfPeople = \"Please enter only number.\";\n    }\n    if (!values.durationToServe) {\n      errors.durationToServe = \"Enter valid minute\";\n    } else if (Math.sign(values.durationToServe) <= 0) {\n      errors.durationToServe = \"Please enter valid minute\";\n    }\n    return errors;\n  }\n\n  componentDidMount() {\n    AdminService.retrieveBusinessDetails(\n      sessionStorage.getItem(BUSINESS_ID)\n    ).then((response) => {\n      console.log(response)\n      this.setState({\n        businessId: sessionStorage.getItem(BUSINESS_ID),\n        orgName: response.data.orgName,\n        userId: sessionStorage.getItem(USER_ID),\n        numberOfPeople: response.data.numberOfPeople,\n        durationToServe: response.data.durationToServe,\n        timezone : response.data.timezone,\n      });\n    });\n  }\n\n  handleChange(event) {\n    console.log(\"Hi\")\n    console.log(event)\n    this.state.timezone = event;\n    console.log(this.state.timezone)\n\n   // this.setState({ [event.target.name]: event.target.value });\n  }\n  render() {\n    let {\n      orgName,\n      businessId,\n      userId,\n      numberOfPeople,\n      durationToServe,\n      timezone,\n    } = this.state;\n    return (\n      <div>\n        <div className=\"container\">\n          <Formik\n            initialValues={{\n              orgName,\n              businessId,\n              userId,\n              numberOfPeople,\n              durationToServe,\n              timezone,\n            }}\n            onSubmit={this.onSubmit}\n            validate={this.validate}\n            enableReinitialize={true}\n          >\n            {/* {this.state.isLogin && (\n            <div className=\"alert alert-warning\">Invalid Credentials</div>\n          )}\n          {this.state.showMessage && <div>Login is Sucessful</div>} */}\n            {(props) => (\n              <Form>\n                <fieldset className=\"form-group\">\n                  <label className=\"label-name  required\">\n                    Business / Company / Organization name\n                  </label>\n                  <ErrorMessage\n                    name=\"orgName\"\n                    component=\"div\"\n                    className=\"alert alert-warning\"\n                  />\n                  <Field\n                    className=\"form-control\"\n                    type=\"text\"\n                    name=\"orgName\"\n                  ></Field>\n                </fieldset>\n                <fieldset className=\"form-group\">\n                  <label className=\"label-name  required\">\n                    Number of people\n                  </label>\n                  <ErrorMessage\n                    name=\"numberOfPeople\"\n                    component=\"div\"\n                    className=\"alert alert-warning\"\n                  />\n                  <Field\n                    className=\"form-control\"\n                    type=\"number\"\n                    name=\"numberOfPeople\"\n                  ></Field>\n                </fieldset>\n                <fieldset className=\"form-group\">\n                  <label className=\"label-name  required\">\n                    Duration to serve in minutes\n                  </label>\n                  <ErrorMessage\n                    name=\"durationToServe\"\n                    component=\"div\"\n                    className=\"alert alert-warning\"\n                  />\n                  <Field\n                    className=\"form-control\"\n                    type=\"number\"\n                    name=\"durationToServe\"\n                  ></Field>\n                </fieldset>\n                <fieldset>\n                <label className=\"label-name  required\">\n                    Business time zone\n                  </label>\n                  <TimezonePicker\n                    absolute = {true}\n                    // defaultValue={'Asia/India'}\n                     value={timezone}\n                    name= \"timezone\"\n                    onChange={this.handleChange}\n                  />\n                </fieldset>\n                <fieldset><div><br></br></div></fieldset>\n                <button className=\"btn btn-success\" type=\"submit\">\n                  Save\n                </button>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Business;\n","import React, { Component } from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport AdminService from \"../../api/admin/AdminService\";\nimport { BUSINESS_ID, SERVICE_ID, USER_ID } from \"../../Constants\";\n\nclass ServiceTimings extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      errorMessage1: \"\",\n      errorMessage2: \"\",\n      errorMessage3: \"\",\n      errorMessage4: \"\",\n      errorMessage5: \"\",\n      user: \"\",\n      userId: sessionStorage.getItem(USER_ID),\n      businessId: sessionStorage.getItem(BUSINESS_ID),\n      monday: \"\",\n      tuesday: \"\",\n      wednesday: \"\",\n      thursday: \"\",\n      friday: \"\",\n      saturday: \"\",\n      sunday: \"\",\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.intializeValues = this.intializeValues.bind(this);\n  }\n\n  onSubmit(values) {\n\n\n    AdminService.createServiceTimings(this.intializeValues(values))\n      .then((response) => {\n        // sessionStorage.setItem(BUSINESS_ID, response.data.businessId);\n        sessionStorage.setItem(SERVICE_ID, response.data.serviceId);\n\n        this.props.history.push(`/serviceTimingsDetails`);\n      })\n      .catch((err) => {\n        this.setState({\n          errorMessage1:\n            'Please provide service timings as per the below Instruction ',\n            errorMessage2:'valid time range in 24 hour format',\n            errorMessage3:'Example: 9-12,14-18,20-22',\n            errorMessage4:'Example: 9-13',\n            errorMessage5:'Example: If it is holiday on any specific day please leave blank' ,\n        });\n      });\n  }\n\n  intializeValues(values) {\n    return {\n      serviceId: values.serviceId,\n      business: {\n        businessId: sessionStorage.getItem(BUSINESS_ID),\n        user: {\n          userId: sessionStorage.getItem(USER_ID),\n        },\n      },\n\n      monday: values.monday,\n      tuesday: values.tuesday,\n      wednesday: values.wednesday,\n      thursday: values.thursday,\n      friday: values.friday,\n      saturday: values.saturday,\n      sunday: values.sunday,\n    };\n  }\n\n  handleChange(event) {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  componentDidMount() {\n\n    AdminService.retrieveServiceTimingsDetailsBYServiceId(\n      sessionStorage.getItem(SERVICE_ID)\n    ).then((response) =>\n      this.setState({\n        serviceId: sessionStorage.getItem(SERVICE_ID),\n        businessId: response.data.business.businessId,\n        userId: sessionStorage.getItem(USER_ID),\n        monday: response.data.monday,\n        tuesday: response.data.tuesday,\n        wednesday: response.data.wednesday,\n        thursday: response.data.thursday,\n        friday: response.data.friday,\n        saturday: response.data.saturday,\n        sunday: response.data.sunday,\n      })\n    );\n  }\n\n  render() {\n    let {\n      serviceId,\n      businessId,\n      userId,\n      monday,\n      tuesday,\n      wednesday,\n      thursday,\n      friday,\n      saturday,\n      sunday,\n    } = this.state;\n    return (\n      <div>\n        <div className=\"container\">\n          <Formik\n            initialValues={{\n              serviceId,\n              businessId,\n              userId,\n              monday,\n              tuesday,\n              wednesday,\n              thursday,\n              friday,\n              saturday,\n              sunday,\n            }}\n            onSubmit={this.onSubmit}\n            enableReinitialize={true}\n          >\n            {/* {this.state.isLogin && (\n            <div className=\"alert alert-warning\">Invalid Credentials</div>\n          )}\n          {this.state.showMessage && <div>Login is Sucessful</div>} */}\n            {(p, saturrops) => (\n              <Form>\n                {this.state.errorMessage1 && (\n                  <h5 className=\"alert alert-warning  text-left\">\n                    {this.state.errorMessage1}\n                    <br/>\n                    {this.state.errorMessage2}\n                    <br/>\n                    {this.state.errorMessage3}\n                    <br/>\n                    {this.state.errorMessage4}\n                    <br/>\n                    {this.state.errorMessage5}\n\n                  </h5>\n                )}\n                {!this.state.errorMessage1 && (  <label className=\"timings\">Please provide service timings as per the below instruction<br></br>\nvalid time range in 24 hours format<br></br>\nExample1: 9-12,14-18,20-22<br></br>\nExample2: 9-13<br></br>\nExample3: If it is holiday on any specific day please leave blank</label>)}\n                <fieldset className=\"form-group\">\n                  <label className=\"label-name  required\">Monday</label>\n                  <Field\n                    className=\"form-control\"\n                    type=\"text\"\n                    name=\"monday\"\n                  ></Field>\n                </fieldset>\n                <fieldset className=\"form-group\">\n                  <label className=\"label-name  required\">Tuesday</label>\n                  <Field\n                    className=\"form-control\"\n                    type=\"text\"\n                    name=\"tuesday\"\n                  ></Field>\n                </fieldset>\n                <fieldset className=\"form-group\">\n                  <label className=\"label-name  required\">Wednesday</label>\n                  <Field\n                    className=\"form-control\"\n                    type=\"text\"\n                    name=\"wednesday\"\n                  ></Field>\n                </fieldset>\n                <fieldset className=\"form-group\">\n                  <label className=\"label-name  required\">Thursday</label>\n                  <Field\n                    className=\"form-control\"\n                    type=\"text\"\n                    name=\"thursday\"\n                  ></Field>\n                </fieldset>\n                <fieldset className=\"form-group\">\n                  <label className=\"label-name  required\">Friday</label>\n                  <Field\n                    className=\"form-control\"\n                    type=\"text\"\n                    name=\"friday\"\n                  ></Field>\n                </fieldset>\n                <fieldset className=\"form-group\">\n                  <label className=\"label-name  required\">Saturday</label>\n                  <Field\n                    className=\"form-control\"\n                    type=\"text\"\n                    name=\"saturday\"\n                  ></Field>\n                </fieldset>\n                <fieldset className=\"form-group\">\n                  <label className=\"label-name  required\">Sunday</label>\n                  <Field\n                    className=\"form-control\"\n                    type=\"text\"\n                    name=\"sunday\"\n                  ></Field>\n                </fieldset>\n                <button className=\"btn btn-success\" type=\"submit\">\n                  Save\n                </button>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ServiceTimings;\n","import React, { Component } from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport AdminService from \"../../api/admin/AdminService\";\nimport { BUSINESS_ID } from \"../../Constants\";\nimport './SpeialDay.css';\n\n\nclass SpecialDayServiceTimings extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      errorMessage1: \"\",\n      errorMessage2: \"\",\n      errorMessage3: \"\",\n      errorMessage4: \"\",\n      errorMessage5: \"\",\n      businessId: sessionStorage.getItem(BUSINESS_ID),\n      specialDay: ['', '', '', ''],\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.validate = this.validate.bind(this);\n    this.intializeValues = this.intializeValues.bind(this);\n  }\n\n  onSubmit(values) {\n    AdminService.createServiceTimings(this.intializeValues(values)).then((response) => {\n      //sessionStorage.setItem(\"businessId\", response.data.businessId);\n      this.props.history.push(`/serviceTimingsDetails`);\n    }).catch((err) => {\n      this.setState({\n        errorMessage1:\n          'Please provide service timings as per the below Instruction ',\n          errorMessage2:'valid time range in 24 hour format',\n          errorMessage3:'Example: 9-12,14-18,20-22',\n          errorMessage4:'Example: 9-13',\n          errorMessage5:'Example: If it is holiday on any specific day please leave blank' ,\n      });\n    });\n  }\n\n  intializeValues(values) {\n    return {\n      business: {\n        businessId: sessionStorage.getItem(BUSINESS_ID),\n      },\n      specialDay: [values.specialDay[0],\n      values.specialDay[1],\n      values.specialDay[2],\n      values.specialDay[3]],\n    };\n  }\n\n  validate(values) {\n    let errors = {};\n    if (!values.specialDay[0]) {\n      errors.specialDay = \"Please fill complete form\";\n    }\n    if (!values.specialDay[1]) {\n      errors.specialDay = \"Please fill complete form\";\n    }else if (Math.sign(values.specialDay[1])<=0) {\n      errors.specialDay = \"Please fill complete form\";\n    }\n    if (!values.specialDay[2]) {\n      errors.specialDay = \"Please fill complete form\";\n    }else if (Math.sign(values.specialDay[2])<=0) {\n      errors.specialDay = \"Please fill complete form\";\n    }\n    return errors;\n  }\n\n  handleChange(event) {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n  render() {\n    let {\n      businessId,\n      specialDay,\n    } = this.state;\n    return (\n      <div>\n\n        <div className=\"container\">\n          <Formik\n            initialValues={{\n              businessId,\n              specialDay,\n            }}\n            onSubmit={this.onSubmit}\n            validate={this.validate}\n\n          >\n            {/* {this.state.isLogin && (\n            <div className=\"alert alert-warning\">Invalid Credentials</div>\n          )}\n          {this.state.showMessage && <div>Login is Sucessful</div>} */}\n            {(props) => (\n              <Form>\n                {this.state.errorMessage1 && (\n                  <h5 className=\"alert alert-warning  text-left\">\n                    {this.state.errorMessage1}\n                    <br/>\n                    {this.state.errorMessage2}\n                    <br/>\n                    {this.state.errorMessage3}\n                    <br/>\n                    {this.state.errorMessage4}\n                    <br/>\n                    {this.state.errorMessage5}\n\n                  </h5>\n                )}\n                <ErrorMessage\n                    name=\"specialDay\"\n                    component=\"div\"\n                    className=\"alert alert-warning\"\n                  />\n                <fieldset className=\"form-group\">\n                  <label className=\"label-name  required\">Date</label>\n                  <Field\n                    className=\"form-control\"\n                    type=\"date\"\n                    name=\"specialDay[0]\"\n                  ></Field>\n                </fieldset>\n                <fieldset className=\"form-group\">\n                  <label className=\"label-name  required\">Number of people</label>\n                  <Field\n                    className=\"form-control\"\n                    type=\"number\"\n                    name=\"specialDay[1]\"\n                  ></Field>\n                </fieldset>\n                <fieldset className=\"form-group\">\n                  <label className=\"label-name  required\">Duration To Serv</label>\n                  <Field\n                    className=\"form-control\"\n                    type=\"number\"\n                    name=\"specialDay[2]\"\n                  ></Field>\n                </fieldset>\n                <fieldset className=\"form-group\">\n                  <label className=\"label-name  required\">Service Timings</label>\n                  <Field\n                    className=\"form-control\"\n                    type=\"text\"\n                    name=\"specialDay[3]\"\n                  ></Field>\n                </fieldset>\n                <button className=\"btn btn-success\" type=\"submit\">\n                  Save\n                </button>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SpecialDayServiceTimings;\n","import React, { Component } from \"react\";\nimport \"../../App.css\";\nimport moment from \"moment\";\nimport ScheduleAppointmentService from \"../../api/booking/ScheduleAppointmentService.js\";\nimport AdminService from \"../../api/admin/AdminService\";\nimport { BUSINESS_ID, SERVICE_ID } from \"../../Constants\";\n\nclass ServiceTimingsDetails extends Component {\n  constructor(props) {\n    super(props);\n    this.refresh = this.refresh.bind(this);\n    this.state = {\n      serviceTimingsDetails: [],\n    };\n  }\n\n  componentDidMount() {\n    this.refresh();\n  }\n\n  refresh() {\n    AdminService.retrieveServiceTimingsDetails(\n      sessionStorage.getItem(BUSINESS_ID)\n    ).then((response) => {\n      for (var i = 0; i < response.data.length; i++) {\n        if (!response.data[i].specialDay) {\n          sessionStorage.setItem(SERVICE_ID,response.data[i].serviceId);\n          break;\n        }}\n    //  sessionStorage.setItem(SERVICE_ID, response.data.serviceId);\n     // sessionStorage.setItem(BUSINESS_ID, response.data.business.businessId);\n\n      this.setState({ serviceTimingsDetails: response.data });\n    });\n  }\n  updateServiceTimingsClicked(serviceId) {\n   // sessionStorage.setItem(SERVICE_ID, serviceId);\n    const { history } = this.props;\n    history.push(`/serviceDetails/${serviceId}`);\n    //this.props.history.push(`/serviceDetails/${serviceId}`)\n  }\n\n  deleteServiceTimingsClicked(serviceId) {\n   // sessionStorage.setItem(SERVICE_ID, serviceId);\n\n    AdminService.deleteServiceTimingsDetails(\n      serviceId\n    ).then((response) => {\n      this.refresh();\n    });\n  }\n\n  render() {\n    return (\n      <div clasName>\n        <div>\n          {this.state.serviceTimingsDetails.map((serviceTimingsDetail) => (\n            <table className=\"table\">\n              {!serviceTimingsDetail.specialDay && (\n                <thead>\n                  <tr key={serviceTimingsDetail.business.businessId}></tr>\n                  <tr>\n                    <th>Organization Name</th>\n                    <td>{serviceTimingsDetail.business.orgName}</td>\n                  </tr>\n                  <tr>\n                    <th>Number of People</th>\n                    <td>{serviceTimingsDetail.business.numberOfPeople}</td>\n                  </tr>\n                  <tr>\n                    <th>Duration to Serve</th>\n                    <td>{serviceTimingsDetail.business.durationToServe}</td>\n                  </tr>\n                  <tr>\n                    <th>Monday</th>\n                    <td>{serviceTimingsDetail.monday}</td>\n                  </tr>\n                  <tr>\n                    <th>Tuesday</th>\n                    <td>{serviceTimingsDetail.tuesday}</td>\n                  </tr>\n                  <tr>\n                    <th>Wednsday</th>\n                    <td>{serviceTimingsDetail.wednesday}</td>\n                  </tr>\n                  <tr>\n                    <th>Thursday</th>\n                    <td>{serviceTimingsDetail.thursday}</td>\n                  </tr>\n                  <tr>\n                    <th>Friday</th>\n                    <td>{serviceTimingsDetail.friday}</td>\n                  </tr>\n                  <tr>\n                    <th>Saturday</th>\n                    <td>{serviceTimingsDetail.saturday}</td>\n                  </tr>\n                  <tr>\n                    <th>Sunday</th>\n                    <td>{serviceTimingsDetail.sunday}</td>\n                  </tr>\n                  <tr>\n                    <th></th>\n                    <td>\n                      <button\n                        className=\"btn btn-success\"\n                        onClick={() =>\n                          this.updateServiceTimingsClicked(\n                            serviceTimingsDetail.serviceId\n                          )\n                        }\n                      >\n                        Update\n                      </button>\n                    </td>{\" \"}\n                  </tr>\n                </thead>\n              )}\n            </table>\n          ))}\n        </div>\n        <div>\n          <table className=\"table\">\n            <thead>\n              <h3>Special day service details</h3>\n\n              <tr>\n                <th>Date</th>\n                <th>Number of People</th>\n                <th>Duration to Serve</th>\n                <th>Service Timings</th>\n              </tr>\n            </thead>\n\n            {this.state.serviceTimingsDetails.map((serviceTimingsDetail) => (\n              <tbody>\n                {serviceTimingsDetail.specialDay && (\n                  <tr key={serviceTimingsDetail.business.businessId}>\n                    <td>{serviceTimingsDetail.specialDay[0]}</td>\n                    <td>{serviceTimingsDetail.specialDay[1]}</td>\n                    <td>{serviceTimingsDetail.specialDay[2]}</td>\n                    <td>{serviceTimingsDetail.specialDay[3]}</td>\n                    <td>\n                      <button\n                        className=\"btn btn-success\"\n                        onClick={() =>\n                          this.deleteServiceTimingsClicked(\n                            serviceTimingsDetail.serviceId\n                          )\n                        }\n                      >\n                        Delete\n                      </button>\n                    </td>\n                  </tr>\n                )}\n              </tbody>\n            ))}\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ServiceTimingsDetails;\n","import React, { Component } from \"react\";\nimport AdminAuthenticationService from \"../../api/admin/AdminAuthenticationService\";\nimport { BUSINESS_ID, SERVICE_ID, USER_ID } from \"../../Constants\";\n\nclass AdminLoginComponent extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      username: \"\",\n      password: \"\",\n      isLogin: false,\n      showMessage: false,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.loginClicked = this.loginClicked.bind(this);\n  }\n  handleChange(event) {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  loginClicked() {\n    AdminAuthenticationService.executeBasicAuthenticationService(\n      this.state.username,\n      this.state.password\n    )\n      .then((response) => {\n        AdminAuthenticationService.registerSuccessfulLoginJwt(\n          response.data.jwt\n        );\n        AdminAuthenticationService.executeGetUserAndBusinessDetails(\n          this.state.username\n        ).then((response) => {\n\n          if (\n            response.data.businessId == \"\" ||\n            response.data.businessId == null\n          ) {\n            sessionStorage.setItem(USER_ID, response.data.user.userId);\n            this.props.history.push(\"/businessDetails\");\n          } else {\n            sessionStorage.setItem(BUSINESS_ID, response.data.businessId);\n            sessionStorage.setItem(USER_ID, response.data.user.userId);\n            this.props.history.push(\"/serviceTimingsDetails\");\n          }\n        });\n\n        // window.location.reload();\n      })\n      .catch(() => {\n        this.props.history.push(\"adminLogin\");\n        this.setState({ showMessage: false });\n        this.setState({ isLogin: true });\n      });\n  }\n\n  render() {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          marginTop: 100,\n        }}\n      >\n        <div className=\"container\">\n          {this.state.isLogin && (\n            <div className=\"alert alert-warning\">Invalid Credentials</div>\n          )}\n          {this.state.showMessage && <div>Login is Sucessful</div>}\n          <label>\n          E-Mail <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>:\n          <input\n            type=\"text\"\n            name=\"username\"\n            value={this.state.username}\n            onChange={this.handleChange}\n            placeholder=\"Ex : aa@gmail.com\"\n          />\n          </label>\n          <br></br>\n          <label>\n          password :<span></span>\n          <input\n            type=\"password\"\n            name=\"password\"\n            value={this.state.password}\n            onChange={this.handleChange}\n            placeholder=\"password\"\n          />\n          </label>\n          <br></br>\n          <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>\n          <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span> <button className=\"btn btn-success\" onClick={this.loginClicked}>\n            Login\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default AdminLoginComponent;\n","import React, { Component } from \"react\";\nimport moment from \"moment\";\nimport { Formik, Form, Field, ErrorMessage, FieldArray } from \"formik\";\nimport AdminService from \"../../api/admin/AdminService\";\nimport { BUSINESS_ID } from \"../../Constants\";\n\nclass UpdateScheduleComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n\n    this.state = {\n         date1 :moment().format('YYYY-MM-DD'),\n         appointments : [],\n         message : null\n    };\n  }\n\n\n  intializeValues(values) {\n\n    return {\n      business: {\n        businessId: sessionStorage.getItem(BUSINESS_ID),\n      },\n      date: values.date,\n      time: values.time,\n      name: values.name,\n      reason: values.reasonForVisit,\n      numberOfPeople: values.numberOfPeople,\n      eMail: values.eMail,\n      phone: values.phone,\n    };\n  }\n\n  handleChange(event) {\n    this.setState({ date1: event.target.value });\n    AdminService.getAppointments(\n      sessionStorage.getItem(BUSINESS_ID) + \"&date=\" + event.target.value\n    ).then((response) => {\n      // this.setState({ timings: JSON.stringify(response.data) });\n      this.setState({ appointments: response.data });\n    });\n  }\n\n\n  componentDidMount() {\n    \n      AdminService.getAppointments(sessionStorage.getItem(BUSINESS_ID)+\"&date=\"+moment().format('YYYY-MM-DD')).then(\n        (response) => {\n          this.setState({ appointments: response.data });\n        }\n      );\n  }\n\n\n  render() {\n    let {\n      date1\n    } = this.state;\n    return(\n      <div clasName>\n        {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\n        <div className=\"container\">\n          <Formik\n            initialValues={{\n              date1\n            }}\n            validate={this.validate}\n            validateOnBlur={false}\n            validateOnChange={false}\n            enableReinitialize={true}\n          >\n            {(props) => (\n              <Form>\n                <ErrorMessage\n                  name=\"date\"\n                  component=\"div\"\n                  className=\"alert alert-warning\"\n                />\n                <fieldset className=\"form-group\">\n                  <label className=\"label-name  required\">Date</label>\n                  <Field\n                    className=\"form-control\"\n                    type=\"date\"\n                    name=\"date1\"\n                    onChange={this.handleChange}\n                  ></Field>\n                </fieldset>\n               \n              </Form>\n            )}\n          </Formik>\n        </div>\n        \n        \n        <div>\n        <table className=\"table\">\n          <thead>\n            <tr>\n            <th>appId</th>\n            <th>date</th>\n            <th>time</th>\n            <th>name</th>\n            <th>reason</th>\n            <th>numberOfPeople</th>\n            <th>eMail</th>\n            <th>phone</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n             this.state.appointments.map(\n               appointment =>\n            <tr key={appointment.appId}>\n              <td>{appointment.appId}</td>\n              <td>{appointment.date}</td>\n              <td>{appointment.time}</td>\n              <td>{appointment.name}</td>\n              <td>{appointment.reason}</td>\n              <td>{appointment.numberOfPeople}</td>\n              <td>{appointment.eMail}</td>\n              <td>{appointment.phone}</td>\n            </tr>\n             )\n            }\n          </tbody>\n        </table>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default UpdateScheduleComponent;\n","import React, { Component } from \"react\";\nimport AdminService from \"../../api/admin/AdminService\";\n\nclass ListOfClients extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      bisiness: []\n    };\n    this.handleClick = this.handleClick.bind(this);\n\n  }\n\n  handleClick(bisiness) {\n    this.props.history.push(\"/addUserAppointment/\"+bisiness);\n\n  }\n  componentDidMount() {\n    AdminService.retrieveAllBusinessDetails().then((response) => {\n      this.setState({ bisiness: response.data });\n        });\n  }\n\n  render() {\n    return (\n        <div>\n        <table className=\"table\">\n          <thead>\n            <tr>\n            <th>Organization name</th>\n            <th>Address</th>\n            <th>Email</th>\n            <th>Phone</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n             this.state.bisiness.map(\n                bisiness =>\n            <tr key={bisiness.businessId}  onClick={() =>this.handleClick(bisiness.businessId)}>\n              <td>{bisiness.orgName}</td>\n              <td>{bisiness.user.addressLine1}</td>\n              <td>{bisiness.user.eMail}</td>\n              <td>{bisiness.user.officePhoneNumber}</td>\n            </tr>\n             )\n            }\n          </tbody>\n        </table>\n        </div>\n    );\n  }\n}\nexport default ListOfClients;\n","import React, { Component } from \"react\";\nimport FooterComponent from \"../schedule-appointment/FooterComponent\";\nimport AdminHeaderComponent from \"./AdminHeaderComponent\";\nimport {BrowserRouter as Router,Route, Switch} from 'react-router-dom'\nimport Contact from \"./Contact\";\nimport GeneralInformation from \"./GeneralInformation\";\nimport Signup from \"./Signup\";\nimport Business from \"./Business\";\nimport ServiceTimings from \"./ServiceTimings\";\nimport SpecialDayServiceTimings from \"./SpecialDayServiceTimings\";\nimport ServiceTimingsDetails from \"./ServiceTimingsDetails\";\nimport AdminLoginComponent from \"./AdminLoginComponent\";\nimport UpdateScheduleComponent from \"../schedule-appointment/UpdateScheduleComponent\";\nimport ListOfScheduledAppointments from \"./ListOfScheduledAppointments\"\nimport ErrorComponent from \"../schedule-appointment/ErrorComponent\"\nimport ListOfClients from \"./ListOfClients\";\n\n\n\nclass HomePageComponent extends Component {\n  constructor(props) {\n    super();\n  }\n\n  render() {\n    return (\n      <div>\n        <Router>\n          <>\n          <Route path=\"/\" component={AdminHeaderComponent}/>\n          <Route path=\"/contact\" exact component={Contact}/>\n          <Route path=\"/generalInfo\" exact component={GeneralInformation}/>\n          <Route path=\"/signup\" exact component={Signup}/>\n          <Route path=\"/businessDetails\" exact component={Business}/>\n          <Route path=\"/serviceDetails\" exact component={ServiceTimings}/>\n          <Route path=\"/specialDayDetails\" exact component={SpecialDayServiceTimings}/>\n          <Route path=\"/serviceTimingsDetails\" exact component={ServiceTimingsDetails}/>\n          <Route path=\"/adminLogin\" exact component={AdminLoginComponent}/>\n          <Route path=\"/serviceDetails/:serviceId\" exact component={ServiceTimings}/>\n          <Route path=\"/addUserAppointment/:id\" exact component={UpdateScheduleComponent}/>\n          <Route path=\"/listOfAppointments\" exact component={ListOfScheduledAppointments}/>\n          <Route path=\"/listOfClients\" exact component={ListOfClients}/>\n\n          <Route path=\"/error\" component={ErrorComponent}/>\n\n        </>\n        </Router>\n        {/* <FooterComponent/> */}\n      </div>\n    );\n  }\n}\n\nexport default HomePageComponent;\n","import React, { Component } from 'react';\nimport {BrowserRouter as Router,Route, Switch} from 'react-router-dom'\nimport './ScheduleAppointmnt.css'\nimport AuthenticatedRoute from './AuthenticatedRoute.jsx'\nimport LoginComponent from './LoginComponent.jsx'\nimport Logout from './LogoutComponent.jsx'\n\nimport ListOfScheduledAppointment from './ListOfScheduledAppointments'\n\nimport HeaderComponent from './HeaderComponent.jsx'\nimport FooterComponent from './FooterComponent.jsx'\nimport ErrorComponent from './ErrorComponent.jsx'\nimport WelcomeComponent from './WelcomeComponent'\nimport UpdateScheduleComponent from './UpdateScheduleComponent';\nimport HomePageComponent from '../admin/AdminHomePageComponent';\n\n\nclass  ScheduleAppointmnt extends Component {\n    render(){\n      return (\n      <div className=\"body\">\n        <Router>\n          <>\n            <Route path=\"/\" component={HeaderComponent}/>\n            <Switch>\n            <Route path=\"/\" exact component={LoginComponent}/>\n            <Route path=\"/login\" exact component={LoginComponent}/>\n            <AuthenticatedRoute path=\"/welcome\" exact component={WelcomeComponent}/>\n            <AuthenticatedRoute path=\"/list\" exact component={ListOfScheduledAppointment}/>\n            <AuthenticatedRoute path=\"/logout\" exact component={Logout}/>\n            <AuthenticatedRoute path=\"/update/:id\" exact component={UpdateScheduleComponent}/>\n            <Route component={ErrorComponent}/>\n\n            </Switch>\n            <FooterComponent/>\n          </>\n        </Router>\n      </div>\n    )\n      }\n    }\n\n    export default ScheduleAppointmnt","import React from 'react';\nimport ScheduleAppointmnt from './components/schedule-appointment/ScheduleAppointment'\nimport './App.css';\nimport './bootstrap.css'\nimport HomePageComponent from './components/admin/AdminHomePageComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App\"> \n                <style>{'body { background-color: #dad9d077; }'}</style>\n         \n      {/* <ScheduleAppointmnt/> */}\n      <HomePageComponent/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}